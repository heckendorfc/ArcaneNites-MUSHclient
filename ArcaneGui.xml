<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Friday, May 07, 2010, 3:05 AM -->
<!-- MuClient version 4.51 -->

<muclient>
<plugin
name="ArcaneGui_GUI"
author="KaVir, Mulet"
id="fd49b63111269dc368b76922"
language="Lua"
purpose="Custom layout for ArcaneNite"
date_written="2010-05-07 03:05:07"
requires="4.51"
version="1.14"
save_state="y"
>
</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Script  -->

<script>
<![CDATA[
--put your lua script there  

--latest
GAUGE_LEFT = 55
GAUGE_HEIGHT = 15

WINDOW_WIDTH = 200
WINDOW_HEIGHT = 65
NUMBER_OF_TICKS = 5

BACKGROUND_COLOUR = ColourNameToRGB "rosybrown"
FONT_COLOUR = ColourNameToRGB "darkred"
BORDER_COLOUR = ColourNameToRGB "#553333"

local using_msdp = false
local movement_window = "movement_image"  -- miniwindow ID
local health_window = "health_image"  -- miniwindow ID
local mana_window = "mana_image"  -- miniwindow ID
local msdp = {}
local border_colour = ColourNameToRGB ("gold") -- ("gold")
local colourBlack = ColourNameToRGB("black")
local hotkeys = {}
local hotkeys_name = {}
local hotkeys_action = {}

-- create the layout here, on getting the prompt, or window resize
function create_layout ()
left = 0
top = 0
right = GetInfo (281) 
bottom = GetInfo (280)
----------------------------------------------------------------------------
-- Create the health, mana and movements bars at the bottom.
----------------------------------------------------------------------------

health_width = math.floor((right+5) / 3)
mana_width = math.floor((right+5) / 3)
moves_width = math.floor((right+5) / 3)

-- HEALTH
pos = 0
local x = tonumber (GetVariable (health_window..'x')) or pos+1
local y = tonumber (GetVariable (health_window..'y')) or top+1

-- make a miniwindow under the text
check (WindowCreate (health_window,   -- window ID
	x,  y,  
	health_width-2, 13,-- width && depth 
	12,            -- center it (ignored anyway) 
	2,             -- draw underneath (1) + absolute location (2)
	colourBlack))  -- background colour
	add_drag_properties(health_window)
	
	-- MANA
	pos = left+health_width-2
	x =	tonumber (GetVariable (mana_window..'x')) or pos+1
	y =	tonumber (GetVariable (mana_window..'y')) or top+1
	-- make a miniwindow under the text
	check (WindowCreate (mana_window,   -- window ID
		x,  y,  
		mana_width-2,  13,  12,          
		2,             -- draw underneath (1) + absolute location (2)
		colourBlack))  -- background colour
	
		add_drag_properties(mana_window)
		
	  -- MOVES
	  pos = left+health_width+mana_width-2
	
	  x =	tonumber (GetVariable (movement_window..'x')) or pos+1
	  y =	tonumber (GetVariable (movement_window..'y')) or top+1
	  -- make a miniwindow under the text
	  check (WindowCreate (movement_window,   -- window ID
	  	x,  y,  
	  	moves_width-2,  13,  12,          
	  	2,             -- draw underneath (1) + absolute location (2)
	  	colourBlack))  -- background colour
	
	  	add_drag_properties(movement_window)
	  	-- draw the energy bars
	  	draw_energy_bars ()
	end -- create_layout
	
	-- fill the three energy bars
	function draw_energy_bars ()
	
	-- HEALTH
	current_health = msdp["HEALTH"]
	max_health = msdp["HEALTH_MAX"]
	if current_health == nil then
	current_health = 0
	max_health = 1
	end -- if
	if current_health ~= nil and max_health ~= nil then
	WindowShow (health_window, true) 
	draw_energy_bar("Health", health_width, 0x1111CC, 0x000033, health_window, current_health, max_health)
	end -- if
	
	-- MANA
	current_mana = msdp["MANA"]
	max_mana = msdp["MANA_MAX"]
	if current_mana == nil then
	current_mana = 0
	max_mana = 1
	end -- if
	
	if current_mana ~= nil and max_mana ~= nil then
	WindowShow (mana_window, true)
	draw_energy_bar("Mana  ", mana_width, 0xFF3366, 0x330000, mana_window, current_mana, max_mana)
	end -- if
	
	move = msdp["MOVEMENT"]
	max_move = msdp["MOVEMENT_MAX"]
	-- initialise with empty bars
	if move == nil then
	move = 0
	max_move = 1
	end -- if
	
	if move ~= nil and max_move ~= nil then
	WindowShow (movement_window, true)
	draw_energy_bar("Moves ", moves_width, 0xFF3366, 0x330000, movement_window, move, max_move)
	end -- if
	end -- draw_energy_bars
	
	
	-- fill the bar
	function draw_energy_bar (type, width, colour, colour2, window, current_value, max_value)
	-- convert the strings to numbers
	current = tonumber(current_value)
	max = tonumber(max_value)
	
	-- Calculate target's health
	if current < 0 then
	current = 0
elseif current > max then
current = max
end -- if

-- clear the bars
WindowGradient (window, 1, -1, width-3, 6, colourBlack, colour2, 2)
WindowLine     (window, 1, 6, width-3, 6, colour2, 0, 1)
WindowGradient (window, 1, 7, width-3, 14, colour2, colourBlack, 2)

-- calculate the filled part
filled = current * (width-4) / max

-- redraw the bars
if current > 0 then
WindowGradient (window, 1, -1, filled+1, 6, colourBlack, colour, 2)
WindowLine     (window, 1, 6, filled+1, 6, colour, 0, 1)
WindowGradient (window, 1, 7, filled+1, 14, colour, colourBlack, 2)
end -- if

-- write the information inside
if max > 0 then
outlined_text (ColourNameToRGB('gold'), window, type..': '..current_value..' / '..max_value, 9, 10, -1)
end -- if

end -- draw_energy_bar

function outlined_text (colour, window, text, size, x, y)
outlineColour = colourBlack
-- write the information inside
WindowFont(window,'f','Times New Roman',size,1,0,0,0)

-- smear black text around the location to create an outline, so that it's clearer to read
WindowText(window,'f',text,x+1,y+1,0,0,outlineColour,0)
WindowText(window,'f',text,x+1,y,0,0,outlineColour,0)
WindowText(window,'f',text,x+1,y-1,0,0,outlineColour,0)
WindowText(window,'f',text,x,y+1,y,0,outlineColour,0)
WindowText(window,'f',text,x,y-1,y,0,outlineColour,0)
WindowText(window,'f',text,x-1,y+1,0,0,outlineColour,0)
WindowText(window,'f',text,x-1,y,0,0,outlineColour,0)
WindowText(window,'f',text,x-1,y-1,0,0,outlineColour,0)

-- display the text
WindowText(window,'f',text,x,y,0,0,colour,0)

end -- outlined_text

function DoGauge (sPrompt, Percent, Colour)

-- show ticks
local ticks_at = (WINDOW_WIDTH - GAUGE_LEFT - 5) / (NUMBER_OF_TICKS + 1)

-- ticks
for i = 1, NUMBER_OF_TICKS do
WindowLine (win, GAUGE_LEFT + (i * ticks_at), vertical, GAUGE_LEFT + (i * ticks_at), vertical + GAUGE_HEIGHT, ColourNameToRGB ("silver"), 0, 1)
end -- for
-- draw a box around it
check (WindowRectOp (win, 1, GAUGE_LEFT, vertical, WINDOW_WIDTH - 5, vertical + GAUGE_HEIGHT, 
	ColourNameToRGB ("lightgrey")))  -- frame entire box
	
	vertical = vertical + font_height + 3
	end -- function
	
	function OnPluginInstall ()
	create_layout ()
	win = GetPluginID ()
	font_id = "fn"
	
	font_name = "Fixedsys"    -- the actual font
	
	local x, y, mode, flags = 
	tonumber (GetVariable ("windowx")) or 0,
	tonumber (GetVariable ("windowy")) or 0,
	tonumber (GetVariable ("windowmode")) or 8, -- bottom right
	tonumber (GetVariable ("windowflags")) or 0
	
	-- make miniwindow so I can grab the font info
	check (WindowCreate (win, 
		x, y, WINDOW_WIDTH, WINDOW_HEIGHT,  
		mode,   
		flags,   
		BACKGROUND_COLOUR) )
	
		add_drag_properties(win)
		
		check (WindowFont (win, font_id, font_name, 9, false, false, false, false, 0, 0))  -- normal
	  
		font_height = WindowFontInfo (win, font_id, 1)  -- height
	  
		if GetVariable ("enabled") == "false" then
		ColourNote ("yellow", "", "Warning: Plugin " .. GetPluginName ().. " is currently disabled.")
		check (EnablePlugin(GetPluginID (), false))
		return
	  end -- they didn't enable us last time
	  WindowShow (win, true)
	end -- OnPluginInstall
	
	function OnPluginSaveState ()
	SetVariable (health_window..'x', tostring (WindowInfo (health_window, 10)))
	SetVariable (health_window..'y', tostring (WindowInfo (health_window, 11)))
	SetVariable (mana_window..'x', tostring (WindowInfo (mana_window, 10)))
	SetVariable (mana_window..'y', tostring (WindowInfo (mana_window, 11)))
	SetVariable (movement_window..'x', tostring (WindowInfo (movement_window, 10)))
	SetVariable (movement_window..'y', tostring (WindowInfo (movement_window, 11)))

	end -- OnPluginSaveState
	
	-- MSDP negotiation
	local MSDP = 69
	
	function OnPluginTelnetRequest (type, data)
	if type == MSDP and data == "WILL" then
	using_msdp = true
	return true
elseif type == MSDP and data == "SENT_DO" then
-- IAC SB MSDP response IAC SE 
SendPkt ("\255\250\69\1REPORT\2CHARACTER_NAME\2SUBCLASS\2SHAPECHANGE\2HEALTH_MAX\2HEALTH\2MANA_MAX\2MANA\2MOVEMENT_MAX\2MOVEMENT\2PRIMAL_CAP\2PRIMAL_SAFE\2PRIMAL\2TRAIN_POWER\2TRAIN_STAT\2TIMER_ADRENALINE\2TIMER_BLUR\2TIMER_REGEN\2LOCATION\2LOCATION_X\2LOCATION_Y\2LOCATION_MAP\2LOCATION_TERRAIN\2LOCATION_NEARBY\2LOCATION_AVATARS\2WORLD_TIME\2WORLD_SUNRISE\2MOUNT\2TARGET\2TARGET_AVATAR\2TARGET_HEALTH\2TARGET_DIRECTION\2TARGET_DISTANCE\2TARGET_AGE\2TARGET_VALID\2TARGET_X\2TARGET_Y\2LOCATION_FACING\2MOVE_POSITION\2MOVE_RATE\2AFFECTS\255\240")
return true
else -- another protocol
return false
end -- if
end -- function OnPluginTelnetRequest

function OnPluginTelnetSubnegotiation (type, data)
if type == MSDP then
endpos = string.len(data)
bName = false
bValue = false
bTable = false
bIgnore = false
variable = nil
value = nil

--Note('Raw data: ['..data..']')

for i=1,endpos,1 do
if string.byte(data,i) == 1 and bTable == false then
if variable ~= nil and value ~= nil then
StoreVariable(variable, value)
variable = nil
value = nil
end -- if
bName = true
bValue = false
elseif string.byte(data,i) == 2 and bTable == false then
if value ~= nil then
value = value.." "
end -- if
bName = false
bValue = true
elseif string.byte(data,i) == 3 then
bTable = true
bIgnore = true
elseif string.byte(data,i) == 4 then
bTable = false
elseif bIgnore == true then
bIgnore = false -- Just ignore one character.
elseif bName == true then
if variable == nil then
variable = ""
end -- if
variable = variable..string.sub(data,i,i)
elseif bValue == true then
if value == nil then
value = ""
end -- if
value = value..string.sub(data,i,i)
end -- if
end -- for

if variable ~= nil then
if value == nil then
value = ""
end -- if
StoreVariable(variable, value)
end -- if

-- redraw the energy bars
draw_energy_bars ()

end -- if
end -- function OnPluginTelnetSubnegotiation

function StoreVariable (MSDP_var, MSDP_val)
--Note('Variable: '..MSDP_var..' = '..MSDP_val)
if MSDP_var == "SERVER_ID" then
draw_energy_bars ()
SendPkt ("\255\250\69\1PLUGIN_ID\2GW2 MUSHclient plugin (version 1.14)\255\240")
elseif MSDP_var == "HOTKEY" then
msdp[MSDP_var] = MSDP_val
update_hotkeys ()
else -- store the variable
msdp[MSDP_var] = MSDP_val
draw_energy_bars ()
end -- if
end -- function StoreVariable

function mousedown(flags, hotspot_id)
windr = hotspot_id
-- find where mouse is so we can adjust window relative to mouse
startx, starty = WindowInfo (windr, 14), WindowInfo (windr, 15)

-- find where window is in case we drag it offscreen
origx, origy = WindowInfo (windr, 10), WindowInfo (windr, 11)
end -- mousedown

function dragmove(flags, hotspot_id)
windr = hotspot_id
-- find where it is now
local posx, posy = WindowInfo (windr, 17), WindowInfo (windr, 18)

-- move the window to the new location
WindowPosition(windr, posx - startx, posy - starty, 0, 2);

-- change the mouse cursor shape appropriately
if posx < 0 or posx > GetInfo (281) or posy < 0 or posy > GetInfo (280) then
check (SetCursor ( 11))   -- X cursor
else
check (SetCursor ( 1))   -- hand cursor
end -- if

end -- dragmove

function dragrelease(flags, hotspot_id)
windr = hotspot_id
local newx, newy = WindowInfo (windr, 17), WindowInfo (windr, 18)

-- don't let them drag it out of view
if newx < 0 or newx > GetInfo (281) or newy < 0 or newy > GetInfo (280) then
-- put it back
WindowPosition(windr, origx, origy, 0, 2);
end -- if out of bounds
end -- dragrelease

function add_drag_properties(windows)
WindowAddHotspot(windows, windows,  
	0, 0, 0, 0,   -- whole window
	"",   -- MouseOver
	"",   -- CancelMouseOver
	"mousedown",
	"",   -- CancelMouseDown
	"",   -- MouseUp
	"Drag to move",  -- tooltip text
	1, 0)  -- hand cursor
	
	WindowDragHandler(windows, windows, "dragmove", "dragrelease", 0) 
	end -- function add_drag_properties(windows)
	


]]>
</script>

</muclient>

